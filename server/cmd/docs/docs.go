// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/agents": {
            "get": {
                "description": "Get all agents",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "agents"
                ],
                "summary": "Get all agents",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/agent.Info"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new agent",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "agents"
                ],
                "summary": "Create a new agent",
                "parameters": [
                    {
                        "description": "Agent",
                        "name": "agent",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/agent.Info"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/api/agents/{id}": {
            "get": {
                "description": "Get agent by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "agents"
                ],
                "summary": "Get agent by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Agent ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/agent.Info"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an agent",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "agents"
                ],
                "summary": "Update an agent",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Agent ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Agent",
                        "name": "agent",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/agent.Info"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete an agent",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "agents"
                ],
                "summary": "Delete an agent",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Agent ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/api/auth/login": {
            "post": {
                "description": "Login and get a token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "Login request",
                        "name": "loginRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.loginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.loginResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/api/configurations": {
            "get": {
                "description": "Get all configurations",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "configurations"
                ],
                "summary": "Get all configurations",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/configuration.Factorio"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "configurations"
                ],
                "summary": "Create a new configuration",
                "parameters": [
                    {
                        "description": "Configuration",
                        "name": "configuration",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/configuration.Factorio"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/api/configurations/{id}": {
            "get": {
                "description": "Get configuration by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "configurations"
                ],
                "summary": "Get configuration by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Configuration ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/configuration.Factorio"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update a configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "configurations"
                ],
                "summary": "Update a configuration",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Configuration ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Configuration",
                        "name": "configuration",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/configuration.Factorio"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "configurations"
                ],
                "summary": "Delete a configuration",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Configuration ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/api/tasks": {
            "get": {
                "description": "Get all tasks",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Get all tasks",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/task.Task"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new task",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Create a new task",
                "parameters": [
                    {
                        "description": "Task",
                        "name": "task",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/task.Task"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/api/tasks/{id}": {
            "get": {
                "description": "Get task by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Get task by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Task ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/task.Task"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update a task",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Update a task",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Task ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Task",
                        "name": "task",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/task.Task"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a task",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Delete a task",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Task ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        }
    },
    "definitions": {
        "agent.Info": {
            "type": "object",
            "properties": {
                "agent_id": {
                    "type": "string"
                },
                "metrics": {
                    "$ref": "#/definitions/metrics.HostMetrics"
                },
                "status": {
                    "type": "integer"
                },
                "tasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/task.Task"
                    }
                }
            }
        },
        "configuration.Factorio": {
            "type": "object",
            "properties": {
                "agentId": {
                    "description": "ID агента для запуска задачи",
                    "type": "string"
                },
                "id": {
                    "description": "уникальный ID конфигурации",
                    "type": "string"
                },
                "map_gen_settings": {
                    "$ref": "#/definitions/configuration.MapGenSettings"
                },
                "map_settings": {
                    "$ref": "#/definitions/configuration.MapSettings"
                },
                "port": {
                    "description": "Порт сервера",
                    "type": "integer"
                },
                "server_settings": {
                    "$ref": "#/definitions/configuration.ServerSetting"
                },
                "type": {
                    "description": "Тип конфигурации",
                    "type": "string"
                }
            }
        },
        "configuration.MapGenSettings": {
            "type": "object",
            "properties": {
                "autoplace_controls": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/configuration.resource"
                    }
                },
                "cliff_settings": {
                    "$ref": "#/definitions/configuration.cliff"
                },
                "height": {
                    "type": "integer"
                },
                "peaceful_mode": {
                    "type": "boolean"
                },
                "seed": {
                    "type": "integer"
                },
                "starting_area": {
                    "type": "integer"
                },
                "width": {
                    "type": "integer"
                }
            }
        },
        "configuration.MapSettings": {
            "type": "object",
            "properties": {
                "difficulty_settings": {
                    "$ref": "#/definitions/configuration.difficulty"
                },
                "enemy_evolution": {
                    "$ref": "#/definitions/configuration.evolution"
                },
                "enemy_expansion": {
                    "$ref": "#/definitions/configuration.expansion"
                },
                "pollution": {
                    "$ref": "#/definitions/configuration.pollution"
                },
                "unit_group": {
                    "$ref": "#/definitions/configuration.unitGroup"
                }
            }
        },
        "configuration.ServerSetting": {
            "type": "object",
            "properties": {
                "afk_autokick_interval": {
                    "type": "integer"
                },
                "allow_commands": {
                    "type": "string"
                },
                "auto_pause": {
                    "type": "boolean"
                },
                "auto_pause_when_players_connect": {
                    "type": "boolean"
                },
                "autosave_interval": {
                    "type": "integer"
                },
                "autosave_only_on_server": {
                    "type": "boolean"
                },
                "autosave_slots": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "ignore_player_limit_for_returning_players": {
                    "type": "boolean"
                },
                "max_heartbeats_per_second": {
                    "type": "integer"
                },
                "max_players": {
                    "type": "integer"
                },
                "max_upload_in_kilobytes_per_second": {
                    "type": "integer"
                },
                "max_upload_slots": {
                    "type": "integer"
                },
                "maximum_segment_size": {
                    "type": "integer"
                },
                "maximum_segment_size_peer_count": {
                    "type": "integer"
                },
                "minimum_latency_in_ticks": {
                    "type": "integer"
                },
                "minimum_segment_size": {
                    "type": "integer"
                },
                "minimum_segment_size_peer_count": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "non_blocking_saving": {
                    "type": "boolean"
                },
                "only_admins_can_pause_the_game": {
                    "type": "boolean"
                },
                "require_user_verification": {
                    "type": "boolean"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "token": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "configuration.cliff": {
            "type": "object",
            "properties": {
                "cliff_elevation_0": {
                    "type": "integer"
                },
                "cliff_elevation_interval": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "richness": {
                    "type": "integer"
                }
            }
        },
        "configuration.difficulty": {
            "type": "object",
            "properties": {
                "spoil_time_modifier": {
                    "type": "number"
                },
                "technology_price_multiplier": {
                    "type": "number"
                }
            }
        },
        "configuration.evolution": {
            "type": "object",
            "properties": {
                "destroy_factor": {
                    "type": "number"
                },
                "enabled": {
                    "type": "boolean"
                },
                "pollution_factor": {
                    "type": "number"
                },
                "time_factor": {
                    "type": "number"
                }
            }
        },
        "configuration.expansion": {
            "type": "object",
            "properties": {
                "building_coefficient": {
                    "type": "number"
                },
                "enabled": {
                    "type": "boolean"
                },
                "enemy_building_influence_radius": {
                    "type": "integer"
                },
                "friendly_base_influence_radius": {
                    "type": "integer"
                },
                "max_colliding_tiles_coefficient": {
                    "type": "number"
                },
                "max_expansion_cooldown": {
                    "type": "integer"
                },
                "max_expansion_distance": {
                    "type": "integer"
                },
                "min_expansion_cooldown": {
                    "type": "integer"
                },
                "neighbouring_base_chunk_coefficient": {
                    "type": "number"
                },
                "neighbouring_chunk_coefficient": {
                    "type": "number"
                },
                "other_base_coefficient": {
                    "type": "number"
                },
                "settler_group_max_size": {
                    "type": "integer"
                },
                "settler_group_min_size": {
                    "type": "integer"
                }
            }
        },
        "configuration.pollution": {
            "type": "object",
            "properties": {
                "ageing": {
                    "type": "integer"
                },
                "diffusion_ratio": {
                    "type": "number"
                },
                "enabled": {
                    "type": "boolean"
                },
                "enemy_attack_pollution_consumption_modifier": {
                    "type": "integer"
                },
                "expected_max_per_chunk": {
                    "type": "integer"
                },
                "max_pollution_to_restore_trees": {
                    "type": "integer"
                },
                "min_pollution_to_damage_trees": {
                    "type": "integer"
                },
                "min_to_diffuse": {
                    "type": "integer"
                },
                "min_to_show_per_chunk": {
                    "type": "integer"
                },
                "pollution_per_tree_damage": {
                    "type": "integer"
                },
                "pollution_restored_per_tree_damage": {
                    "type": "integer"
                },
                "pollution_with_max_forest_damage": {
                    "type": "integer"
                }
            }
        },
        "configuration.resource": {
            "type": "object",
            "properties": {
                "frequency": {
                    "type": "number"
                },
                "richness": {
                    "type": "number"
                },
                "size": {
                    "type": "number"
                }
            }
        },
        "configuration.unitGroup": {
            "type": "object",
            "properties": {
                "max_gathering_unit_groups": {
                    "type": "integer"
                },
                "max_group_gathering_time": {
                    "type": "integer"
                },
                "max_group_member_fallback_factor": {
                    "type": "integer"
                },
                "max_group_radius": {
                    "type": "number"
                },
                "max_group_slowdown_factor": {
                    "type": "number"
                },
                "max_member_slowdown_when_ahead": {
                    "type": "number"
                },
                "max_member_speedup_when_behind": {
                    "type": "number"
                },
                "max_unit_group_size": {
                    "type": "integer"
                },
                "max_wait_time_for_late_members": {
                    "type": "integer"
                },
                "member_disown_distance": {
                    "type": "integer"
                },
                "min_group_gathering_time": {
                    "type": "integer"
                },
                "min_group_radius": {
                    "type": "number"
                },
                "tick_tolerance_when_member_arrives": {
                    "type": "integer"
                }
            }
        },
        "handlers.loginRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "handlers.loginResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "metrics.HostMetrics": {
            "type": "object",
            "properties": {
                "cpu_usage": {
                    "type": "number"
                },
                "ram_available": {
                    "type": "integer"
                },
                "ram_total": {
                    "type": "integer"
                }
            }
        },
        "task.Task": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "ID задачи",
                    "type": "string"
                },
                "status": {
                    "description": "Статус задачи",
                    "type": "integer"
                },
                "type": {
                    "description": "Тип задачи",
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Otus-Project",
	Description:      "This is a simple API for the Otus-Project",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
